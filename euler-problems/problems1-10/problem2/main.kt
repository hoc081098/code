import java.text.DecimalFormat
import kotlin.coroutines.experimental.buildSequence
import kotlin.system.measureNanoTime

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * Result: 4613732
 */

fun solve1(): Int {
    var f1: Int
    var f2 = 1
    var f = 2
    var sum = 0

    while (f <= 4000000) {
        if (f % 2 == 0) {
            sum += f
        }

        f1 = f2
        f2 = f
        f = f1 + f2
    }

    return sum
}

fun solve2(): Int {
    fun fibonacci() = buildSequence {
        var f1: Int
        var f2 = 1
        var f = 2

        while (true) {
            yield(f)
            f1 = f2
            f2 = f
            f = f1 + f2
        }
    }

    return fibonacci()
            .takeWhile { it <= 4000000 }
            .filter { it % 2 == 0 }
            .sum()
}

fun solve3(): Int {
    fun fibonacci() = generateSequence(0 to 1) {
        it.second to it.first + it.second
    }.drop(2).map { it.first }

    return fibonacci()
            .takeWhile { it <= 4000000 }
            .filter { it % 2 == 0 }
            .sum()
}

fun main(args: Array<String>) {
    measureNanoTime { println(solve1()) }.let { println("solve1: ${DecimalFormat.getInstance().format(it)}") }
    measureNanoTime { println(solve2()) }.let { println("solve2: ${DecimalFormat.getInstance().format(it)}") }
    measureNanoTime { println(solve3()) }.let { println("solve2: ${DecimalFormat.getInstance().format(it)}") }
}